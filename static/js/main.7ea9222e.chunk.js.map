{"version":3,"sources":["function.js","page/Copy.js","page/Error.js","App.js","serviceWorker.js","index.js"],"names":["className","args","join","Dropzone","multiple","onOperation","onDelete","files","React","useState","myFile","setMyFile","onDrop","useCallback","acceptedFiles","useDropzone","accept","getRootProps","getInputProps","file","map","key","Chip","icon","AttachFile","label","path","size","color","style","cursor","length","Copy","darkState","classes","makeStyles","theme","title","textShadow","button","margin","spacing","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","useStyles","original","setOriginal","value","setValue","progress","setProgress","name","setName","num","setNum","checked","setChecked","showFile","a","reader","FileReader","onload","e","target","result","zip","PizZip","xml","str2xml","asText","paragraphsXml","getElementsByTagName","paragraphs","i","len","fullText","textsXml","j","len2","textXml","childNodes","nodeValue","push","c","el","includes","replace","readAsBinaryString","str","charCodeAt","substr","DOMParser","parseFromString","id","Checkbox","inputProps","BookmarkBorder","checkedIcon","Bookmark","onChange","split","slice","Paper","component","sx","p","display","alignItems","Button","variant","onClick","navigator","clipboard","readText","undefined","writeText","InputBase","ml","flex","placeholder","Divider","height","m","orientation","IconButton","aria-label","Add","_num","String","parseInt","padStart","element","document","createElement","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","justifyContent","CircularProgress","options","originalFileName","updatedFileName","outputFormat","past","current","row","shift","time","Accordion","AccordionSummary","expandIcon","ExpandMore","aria-controls","Typography","AccordionDetails","Error","paragraph","AppInner","mobileOpen","setState","pathname","handleThemeChange","container","localStorage","setItem","prev","root","drawer","breakpoints","up","width","appBar","marginLeft","menuButton","marginRight","grey","blue","toolbar","mixins","drawerPaper","backgroundColor","content","flexGrow","padding","menu","useTheme","GTranslate","routeObj","obj","List","index","badge","to","ListItem","page","ListItemIcon","ListItemText","primary","Box","CssBaseline","AppBar","position","sm","boxShadow","Toolbar","edge","mr","Menu","exact","App","props","wind","prefersDark","window","matchMedia","matches","localDark","getItem","isDark","useLocation","state","palletType","mainPrimaryColor","mainSecondaryColor","darkTheme","createTheme","main","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ea9222e.chunk.js","sourcesContent":["const className = (...args) => args.join(' ');\nexport { className };\n","import React from \"react\";\nimport {\n    Accordion,\n    AccordionDetails,\n    AccordionSummary,\n    Button, Checkbox,\n    Chip,\n    CircularProgress, Divider, IconButton, InputBase, Paper,\n    Typography\n} from \"@mui/material\";\nimport { Add, AttachFile, Bookmark, BookmarkBorder, ExpandMore } from \"@mui/icons-material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { ReactGhLikeDiff } from \"react-gh-like-diff\";\nimport { useDropzone } from \"react-dropzone\";\nimport PizZip from \"pizzip\";\nimport { DOMParser } from '@xmldom/xmldom'\n\nimport { className } from \"../function\";\n\nimport \"react-gh-like-diff/dist/css/diff2html.min.css\";\nimport \"../styles/main.css\";\nimport \"../styles/styles.css\";\n\nfunction Dropzone({\n                      multiple = false, onOperation, onDelete = () => {\n    }, files = (files) => { }\n                  }) {\n    const [myFile, setMyFile] = React.useState([]);\n\n    const onDrop = React.useCallback(\n        (acceptedFiles) => {\n            setMyFile([...acceptedFiles]);\n            onOperation(acceptedFiles);\n            files([...acceptedFiles])\n        },\n        [myFile, onOperation]\n    );\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept:\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        onDrop\n    });\n\n    const removeAll = () => setMyFile([]);\n    const file = myFile.map((file, key) => (\n        <Chip\n            key={key}\n            icon={<AttachFile />}\n            label={`${file.path} - ${file.size} bytes`}\n            color=\"primary\"\n            onDelete={() => {\n                removeAll();\n                onDelete();\n            }}\n            style={{ cursor: \"pointer\" }}\n        />\n    ));\n\n    return (\n        <>\n      <span {...getRootProps({ className: \"drop-zon\" })}>\n        {<input {...getInputProps()} multiple={multiple} />}\n          {file.length > 0 ? (\n              file\n          ) : (\n              <Chip\n                  icon={<AttachFile />}\n                  label={\"File\"}\n                  color=\"primary\"\n                  style={{\n                      cursor: \"pointer\"\n                  }}\n              />\n          )}\n      </span>\n        </>\n    );\n}\n\nexport default function Copy({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        },\n        button: {\n            margin: theme.spacing(1)\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            flexBasis: \"33.33%\",\n            flexShrink: 0\n        },\n        secondaryHeading: {\n            fontSize: theme.typography.pxToRem(15),\n            color: theme.palette.text.secondary\n        }\n    }));\n    const classes = useStyles();\n\n    const [original, setOriginal] = React.useState(\"\");\n    const [value, setValue] = React.useState(\"\");\n    const [progress, setProgress] = React.useState(false);\n    const [name, setName] = React.useState(\"myFile\");\n    const [num, setNum] = React.useState(\"01\");\n    const [checked, setChecked] = React.useState(true);\n\n    const showFile = async (files) => {\n        const reader = new FileReader();\n        setProgress(true);\n        reader.onload = async (e) => {\n\n            const text = e.target.result;\n            const zip = new PizZip(text);\n            const xml = str2xml(zip.files[\"word/document.xml\"].asText());\n\n            /*\n            const par = Object.values(xml.getElementsByTagName(\"w:p\")).reduce((pre, value) =>\n            {\n                const fullText = Object.values(value.getElementsByTagName(\"w:t\")).reduce((pre2, value2) =>\n                {\n                    if (value2.childNodes) pre2 += (value2.childNodes[0]?.nodeValue) || \"\";\n                    return pre2;\n                }, \"\")\n                console.log(fullText)\n                pre.push(fullText);\n                return pre;\n            }, []);\n            */\n\n            const paragraphsXml = xml.getElementsByTagName(\"w:p\");\n            const paragraphs = [];\n            for (let i = 0, len = paragraphsXml.length; i < len; i++) {\n                let fullText = \"\";\n                const textsXml = paragraphsXml[i].getElementsByTagName(\"w:t\");\n                for (let j = 0, len2 = textsXml.length; j < len2; j++) {\n                    const textXml = textsXml[j];\n                    if (textXml.childNodes) {\n                        fullText += (textXml.childNodes[0]?.nodeValue) || \"\";\n                    }\n                }\n\n                paragraphs.push(fullText);\n            }\n\n            setOriginal(paragraphs.join(\"\\n\"));\n\n            if (paragraphs.length > 0) {\n                let c = paragraphs.map((el) => {\n                    if (el.includes(\"->\"))\n                        el = el.replace(/\\b(\\d\\d:\\d\\d:\\d\\d)\\.(\\d\\d\\d)\\b/g, \"$1,$2\");\n                    return el;\n                });\n                setValue(c.join(\"\\n\"));\n                setProgress(false);\n            }\n        };\n        reader.readAsBinaryString(files[0]);\n    };\n\n    function str2xml(str) {\n        if (str.charCodeAt(0) === 65279) str = str.substr(1);\n        return new DOMParser().parseFromString(str, \"text/xml\");\n    }\n\n    return (\n        <>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                Copy\n                <span className=\"text-primary\">Srt</span>\n            </h1>\n\n            <div id={\"spaces\"}>\n                <Checkbox\n                    {...{ inputProps: { 'aria-label': 'Checkbox' } }}\n                    checked={checked}\n                    icon={<BookmarkBorder />}\n                    checkedIcon={<Bookmark />}\n                    onChange={({ target: { checked } }) => setChecked(checked)}\n                />\n                <Dropzone\n                    onOperation={showFile}\n                    onDelete={() => {\n                        setValue(\"\");\n                        setName(\"myFile\")\n                        setNum(\"01\")\n                    }}\n                    files={(files) => {\n                        if (checked) {\n                            setName(files[0].name.split('.').slice(0, -1).join('.'))\n                            setNum(\"\")\n                        }\n                    }}\n                />\n                <br /><br />\n\n                <Paper\n                    component=\"form\"\n                    sx={{ p: '2px 4px', display: 'flex', alignItems: 'center' }}\n                >\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={async (e) => {\n                            setProgress(true);\n                            const text = await navigator.clipboard?.readText();\n                            if (text !== undefined && text.length > 0) {\n                                setOriginal(text)\n                                let c = text.split(\"\\n\").map((el) => {\n                                    if (el.includes(\"->\"))\n                                        el = el.replace(/\\b(\\d\\d:\\d\\d:\\d\\d)\\.(\\d\\d\\d)\\b/g, \"$1,$2\");\n                                    return el;\n                                });\n                                setValue(c.join(\"\\n\"));\n                                setProgress(false);\n                                navigator.clipboard.writeText(\"\");\n                            } else {\n                                setProgress(false);\n                            }\n                        }}\n                    >\n                        Paste\n                    </Button>\n                    <InputBase\n                        sx={{ ml: 1, flex: 1 }}\n                        placeholder=\"Name file\"\n                        inputProps={{ 'aria-label': 'search google maps' }}\n                        value={name}\n                        onChange={({ target: { value } }) => setName(value)}\n                    />\n                    <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\n                    <InputBase\n                        sx={{ ml: 1, flex: 1 }}\n                        placeholder=\"Num file\"\n                        inputProps={{ 'aria-label': 'search google maps' }}\n                        value={num}\n                        onChange={({ target: { value } }) => setNum(value)}\n                    />\n                    <IconButton color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\n                        <Add onClick={() => {\n                            let _num = String(parseInt(num) + 1).padStart(2, \"0\");\n                            setNum(_num);\n                        }} />\n                    </IconButton>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            const element = document.createElement(\"a\");\n                            const file = new Blob([value], { type: \"text/plain\" });\n                            element.href = URL.createObjectURL(file);\n                            element.download = name + num + \".srt\";\n                            document.body.appendChild(element); // Required for this to work in FireFox\n                            element.click();\n                        }}\n                    >\n                        Download\n                    </Button>\n                </Paper>\n\n            </div>\n            <br />\n\n            {progress && (\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\"\n                    }}\n                >\n                    <CircularProgress />\n                </div>\n            )}\n\n            {value.length > 0 &&\n                <ReactGhLikeDiff\n                    options={{\n                        originalFileName: name + num,\n                        updatedFileName: name + num,\n                        outputFormat: 'side-by-side'\n                    }}\n                    past={original}\n                    current={value}\n                />\n            }\n\n            {value.length > 0 &&\n                value.split(\"\\n\\n\").map((el, key) => {\n                    let row = el.split(\"\\n\");\n                    const num = row.shift();\n                    const time = row.shift();\n                    return (\n                        <Accordion key={key}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMore />}\n                                aria-controls=\"panel1bh-content\"\n                                id=\"panel1bh-header\"\n                            >\n                                <Typography className={classes.heading}>\n                                    <span style={{ color: \"#155e14\" }}>{num}</span>{\" \"}\n                                    <span style={{ color: \"#e26823\" }}>({time})</span>\n                                </Typography>\n                                <Typography className={classes.secondaryHeading}>\n                                    {row.join(\"\\n\")}\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography style={{ color: \"#1292d5\" }}>\n                                    {row.join(\"\\n\")}\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    );\n                })}\n        </>\n    );\n}\n","import React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nexport default function Error({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"}`\n        }\n    }));\n    const classes = useStyles();\n    return (\n        <div className=\"text-center\">\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>404</h1>\n            <Typography paragraph variant=\"h5\" color=\"textSecondary\">\n                We are sorry but we could not find the page you are looking.\n            </Typography>\n        </div>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Link, useLocation, Routes } from \"react-router-dom\";\nimport { Copy, Error } from \"./page\";\n\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport \"./styles/main.css\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  Chip,\n  createTheme,\n  CssBaseline,\n  Drawer,\n  Hidden,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  ThemeProvider,\n  Toolbar,\n  useTheme\n} from \"@mui/material\";\nimport { GTranslate, Menu } from \"@mui/icons-material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { blue, grey } from \"@mui/material/colors\";\n\nconst drawerWidth = 240;\n\nconst AppInner = ({ mobileOpen, darkState, setState, pathname, container }) => {\n  const handleDrawerToggle = () =>\n      setState((prev) => ({ ...prev, mobileOpen: !mobileOpen }));\n  const changePage = (page) => setState((prev) => ({ ...prev, page }));\n  const handleThemeChange = React.useCallback(() => {\n    localStorage.setItem(\"dark\", !darkState);\n    setState((prev) => ({ ...prev, darkState: !prev.darkState }));\n  }, []);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\"\n    },\n    drawer: {\n      [theme.breakpoints.up(\"lg\")]: {\n        width: drawerWidth,\n        flexShrink: 0\n      }\n    },\n    appBar: {\n      [theme.breakpoints.up(\"lg\")]: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth\n      }\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up(\"lg\")]: {\n        display: \"none\"\n      },\n      backgroundColor: darkState ? grey[900] : blue[500]\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: drawerWidth,\n      color: \"#ffffff\",\n      backgroundColor: darkState ? grey[900] : blue[500]\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      backgroundColor: !darkState ? grey[50] : grey[800]\n    }\n  }));\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const menu = [{ title: \"Copy Srt\", path: \"docx\", icon: <GTranslate /> }];\n\n  const routeObj = [\n    { path: \"/\", obj: <Copy darkState={darkState} /> },\n    { path: \"copy\", obj: <Copy darkState={darkState} /> }\n  ];\n\n  const drawer = (\n      <div className=\"mt-32\">\n        <div className={classes.toolbar} />\n        <List>\n          {menu.map(({ title, path, icon, badge }, index) => (\n              <Link to={`/${path}`} key={title}>\n                <ListItem button key={title} onClick={() => changePage(path)}>\n                  <ListItemIcon\n                      style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                  >\n                    {icon}\n                  </ListItemIcon>\n                  <ListItemText\n                      primary={<span className=\"font-bold\">{title}</span>}\n                      style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                  />\n                  {badge && (\n                      <Chip\n                          label={badge}\n                          size=\"small\"\n                          color=\"secondary\"\n                          className=\"font-bold\"\n                          style={{ color: \"#ffffff\" }}\n                      />\n                  )}\n                </ListItem>\n              </Link>\n          ))}\n        </List>\n      </div>\n  );\n\n  return (\n      <Box sx={{ display: \"flex\" }}>\n        <CssBaseline />\n        <AppBar\n            position=\"fixed\"\n            sx={{\n              width: { sm: `calc(100% - ${drawerWidth}px)` },\n              ml: { sm: `${drawerWidth}px` }\n            }}\n            className={classes.appBar}\n            style={{\n              backgroundColor: darkState ? grey[800] : grey[50],\n              boxShadow: \"none\"\n            }}\n        >\n          <Toolbar className={\"shadow-none\"}>\n            <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                edge=\"start\"\n                onClick={handleDrawerToggle}\n                sx={{ mr: 2, display: { sm: \"none\" } }}\n                className={classes.menuButton}\n            >\n              <Menu />\n            </IconButton>\n            <div className=\"ml-auto text-right flex\">\n              <DarkModeToggle\n                  onChange={handleThemeChange}\n                  checked={darkState}\n                  size={60}\n              />\n            </div>\n          </Toolbar>\n        </AppBar>\n        {false && <>\n        <Box\n            component=\"nav\"\n            sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n            aria-label=\"mailbox folders\"\n        >\n          {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n          <Drawer\n              container={container}\n              variant=\"temporary\"\n              open={mobileOpen}\n              onClose={handleDrawerToggle}\n              ModalProps={{\n                keepMounted: true // Better open performance on mobile.\n              }}\n              sx={{\n                display: { xs: \"block\", sm: \"none\" },\n                \"& .MuiDrawer-paper\": {\n                  boxSizing: \"border-box\",\n                  width: drawerWidth,\n                  backgroundColor: darkState ? grey[900] : blue[500]\n                }\n              }}\n          >\n            {drawer}\n          </Drawer>\n          <Drawer\n              variant=\"permanent\"\n              sx={{\n                display: { xs: \"none\", sm: \"block\" },\n                \"& .MuiDrawer-paper\": {\n                  boxSizing: \"border-box\",\n                  width: drawerWidth,\n                  backgroundColor: darkState ? grey[900] : blue[500]\n                }\n              }}\n              open\n          >\n            {drawer}\n          </Drawer>\n        </Box></>}\n\n        <Box\n            component=\"main\"\n            sx={{\n              flexGrow: 1,\n              p: 3,\n              width: { sm: `calc(100% - ${drawerWidth}px)` },\n                height: '100vh',\n                backgroundColor: darkState ? grey[800] : grey[50],\n            }}\n        >\n          <Toolbar />\n          <Routes>\n            {routeObj.map(({ path, obj }, key) => (\n                <Route exact path={`/${path}`} element={obj} key={key} />\n            ))}\n            <Route path={`/lib`} element={() => <div>Hi!</div>} />\n            <Route element={() => <Error darkState={darkState} />} />\n          </Routes>\n        </Box>\n      </Box>\n  );\n};\n\nfunction App(props) {\n  const { wind } = props;\n  const container = wind !== undefined ? () => wind().document.body : undefined;\n  const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const localDark = localStorage.getItem(\"dark\");\n  const isDark = localDark === null ? prefersDark : localDark === \"true\";\n\n  let location = useLocation();\n  let pathname = location.pathname.replace(\"/\", \"\");\n  if (pathname === \"\") pathname = \"docx\";\n\n  const [state, setState] = React.useState({\n    mobileOpen: false,\n    darkState: isDark\n  });\n  const { mobileOpen, darkState } = state;\n\n  const palletType = darkState ? \"dark\" : \"light\";\n  const mainPrimaryColor = darkState ? grey[900] : blue[500];\n  const mainSecondaryColor = darkState ? grey[800] : blue[300];\n  const darkTheme = createTheme({\n    palette: {\n      type: palletType,\n      primary: {\n        main: mainPrimaryColor\n      },\n      secondary: {\n        main: mainSecondaryColor\n      }\n    }\n  });\n\n  return (\n      <ThemeProvider theme={darkTheme}>\n        <AppInner {...{ mobileOpen, darkState, setState, pathname, container }} />\n      </ThemeProvider>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  wind: PropTypes.func\n};\n\nexport default App;\n/*\n\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter basename='/'>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}