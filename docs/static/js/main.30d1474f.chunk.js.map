{"version":3,"sources":["function.js","page/Docx.js","page/Error.js","page/Copy.js","App.js","serviceWorker.js","index.js"],"names":["className","args","join","InspectModule","Error","darkState","classes","makeStyles","theme","title","color","textShadow","useStyles","Typography","paragraph","variant","Copy","button","margin","spacing","useRef","React","useState","value","setValue","progress","setProgress","name","setName","locale","utils","MomentUtils","id","TextField","label","defaultValue","size","onChange","target","Button","onClick","e","a","navigator","clipboard","readText","text","length","c","split","map","el","includes","replace","writeText","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","CircularProgress","key","parseInt","style","drawerWidth","App","props","wind","container","undefined","prefersDark","window","matchMedia","matches","localDark","localStorage","getItem","isDark","pathname","useLocation","mobileOpen","state","setState","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","grey","blue","toolbar","mixins","drawerPaper","backgroundColor","content","flexGrow","padding","palletType","mainPrimaryColor","mainSecondaryColor","darkTheme","createMuiTheme","palette","primary","main","secondary","useTheme","handleDrawerToggle","prev","handleThemeChange","useCallback","setItem","menu","path","icon","GTranslate","routeObj","obj","List","index","badge","to","ListItem","page","ListItemIcon","ListItemText","Chip","ThemeProvider","CssBaseline","AppBar","position","boxShadow","Toolbar","IconButton","aria-label","edge","Menu","checked","Hidden","mdUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","mdDown","exact","component","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30d1474f.chunk.js","sourcesContent":["const className = (...args) => args.join(' ');\nexport { className };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n    TextField,\n    makeStyles,\n    Button,\n    Chip,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails\n} from \"@material-ui/core\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n    TimePicker\n} from \"@material-ui/pickers\";\nimport {\n    AttachFile,\n    CloudDownload,\n    CloudUpload,\n    ExpandMore\n} from \"@material-ui/icons\";\nimport { useDropzone } from \"react-dropzone\";\nimport PizZip from \"pizzip\";\nimport PizZipUtils from \"pizzip/utils/index.js\";\nimport { saveAs } from \"file-saver\";\nimport Docxtemplater from \"docxtemplater\";\nimport InspectModule from \"docxtemplater/js/inspect-module\";\nimport moment from \"moment\";\nimport MomentUtils from \"@date-io/moment\";\nimport \"moment/locale/it\";\nconst iModule = InspectModule();\nimport WebViewer from \"@pdftron/webviewer\";\n\nfunction loadFile(url, callback) {\n    PizZipUtils.getBinaryContent(url, callback);\n}\n\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nfunction Dropzone({ multiple = false, onOperation, onDelete = () => {} }) {\n    const [myFile, setMyFile] = React.useState([]);\n\n    const onDrop = React.useCallback(\n        (acceptedFiles) => {\n            setMyFile([...acceptedFiles]);\n            onOperation(acceptedFiles);\n        },\n        [myFile, onOperation]\n    );\n\n    const { getRootProps, getInputProps } = useDropzone({\n        onDrop\n    });\n\n    const removeAll = () => setMyFile([]);\n    const file = myFile.map((file, key) => (\n        <Chip\n            key={key}\n            icon={<AttachFile />}\n            label={`${file.path} - ${file.size} bytes`}\n            color=\"primary\"\n            onDelete={() => {\n                removeAll();\n                onDelete();\n            }}\n            style={{ cursor: \"pointer\" }}\n        />\n    ));\n\n    return (\n        <>\n      <span {...getRootProps({ className: \"drop-zon\" })}>\n        {<input {...getInputProps()} multiple={multiple} />}\n          {file.length > 0 ? (\n              file\n          ) : (\n              <Chip\n                  icon={<AttachFile />}\n                  label={\"File\"}\n                  color=\"primary\"\n                  style={{\n                      cursor: \"pointer\"\n                  }}\n              />\n          )}\n      </span>\n        </>\n    );\n}\n\nexport default function Docx({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        },\n        button: {\n            margin: theme.spacing(1)\n        }\n    }));\n    const classes = useStyles();\n    const [url, setUrl] = useState(\"\");\n    const [docs, setDocs] = useState(\"\");\n    const [state, setState] = useState({});\n    const viewer = useRef(null);\n    const [instance, setInstance] = useState(null);\n\n    const [upload, setUpload] = useState(false);\n\n    useEffect(() => {\n        if (\n            !(\n                state &&\n                Object.keys(state).length === 0 &&\n                state.constructor === Object\n            ) &&\n            upload\n        )\n            generateDocument();\n    }, [state, upload, instance]);\n\n    useEffect(() => {\n        if (upload)\n            WebViewer(\n                {\n                    path: \"/docx/webviewer/lib\",\n                    extension: \"docx\"\n                },\n                viewer.current\n            ).then((instance) => {\n                instance.setLanguage('it');\n                setInstance(instance);\n            });\n    }, [upload]);\n\n    const showFile = async (files) => {\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            const content = e.target.result;\n            var doc = new Docxtemplater(new PizZip(content), { modules: [iModule] });\n            var tags = iModule.getAllTags();\n            var out = doc.getZip().generate({\n                type: \"blob\",\n                mimeType:\n                    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n            });\n            const objectURL = URL.createObjectURL(out);\n            setUrl(objectURL);\n            setUpload(true);\n\n            setState(\n                Object.fromEntries(\n                    Object.entries(tags).map((el) => {\n                        let [name, type] = el[0]?.split(\"::\");\n                        let value;\n                        if (type !== undefined) [type, value] = type?.split(\"||\");\n                        else [name, value] = name?.split(\"||\");\n                        return [\n                            el[0],\n                            value !== undefined\n                                ? [\"date\", \"time\"].includes(type)\n                                ? moment(\n                                    value === \"now\" ? new Date() : value,\n                                    type === \"date\" ? \"DD/MM/YYYY\" : \"HH:mm\"\n                                )\n                                : value\n                                : [\"date\", \"time\"].includes(type)\n                                ? null\n                                : \"\"\n                        ];\n                    })\n                )\n            );\n        };\n        reader.readAsBinaryString(files[0]);\n    };\n\n    const generateDocument = (save = false) => {\n        loadFile(url, function (error, content) {\n            if (error) {\n                throw error;\n            }\n            var zip = new PizZip(content);\n            var doc = new Docxtemplater().loadZip(zip).setOptions({ linebreaks:true});\n            let b = Object.entries(state)\n                .map(el => console.log(el[0].replace(/||[A-Z]+(?:_[A-Z]+)*/ig,\"\"))\n                    //.replace(/||[A-Z]+(?:_[A-Z]+)*/ig,\"\")\n                )\n            const t = Object.fromEntries(\n                Object.entries(state).map((el) => {\n                    let [, type] = el[0]?.split(\"::\");\n                    if (type !== undefined) type = type?.split(\"||\")[0];\n                    let value = el[1];\n                    if(typeof value === \"string\") {\n                        let c = value.match(/{[A-Z]+(?:_[A-Z]+)*}/ig)\n                        //if(c?.length > 0)\n                            //c = c.map(el => el.replace(\"{\", \"\").replace(\"}\", \"\"))\n                       // console.log(\"c: \", value, c, b, state)\n                    }\n                    if (value !== null && [\"date\", \"time\"].includes(type))\n                        value = moment(\n                            value,\n                            type === \"date\" ? \"DD/MM/YYYY\" : \"HH:mm\"\n                        ).format(type === \"date\" ? \"DD/MM/YYYY\" : \"HH:mm\");\n                    if (value === \"\" || !value) value = `{${el[0]}}`;\n                    return [el[0], value];\n                })\n            );\n\n            doc.setData(t);\n            try {\n                // render the document (replace all occurences of {first_name} by John, {last_name} by Doe, ...)\n                doc.render();\n            } catch (error) {\n                // The error thrown here contains additional information when logged with JSON.stringify (it contains a properties object containing all suberrors).\n                function replaceErrors(key, value) {\n                    if (value instanceof Error) {\n                        return Object.getOwnPropertyNames(value).reduce(function (\n                            error,\n                            key\n                            ) {\n                                error[key] = value[key];\n                                return error;\n                            },\n                            {});\n                    }\n                    return value;\n                }\n                console.log(JSON.stringify({ error: error }, replaceErrors));\n\n                if (error.properties && error.properties.errors instanceof Array) {\n                    const errorMessages = error.properties.errors\n                        .map(function (error) {\n                            return error.properties.explanation;\n                        })\n                        .join(\"\\n\");\n                    console.log(\"errorMessages\", errorMessages);\n                    // errorMessages is a humanly readable message looking like this :\n                    // 'The tag beginning with \"foobar\" is unopened'\n                }\n                throw error;\n            }\n            var out = doc.getZip().generate({\n                type: \"blob\",\n                mimeType:\n                    \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n            }); //Output the document using Data-URI\n            instance?.loadDocument(out, { filename: \"name.docx\" });\n            if(save) saveAs(out, \"output.docx\");\n        });\n    };\n\n    const onChange = ({ target: { value } }, name) => {\n        setState((prev) => ({ ...prev, [name]: value }));\n    };\n\n    const onChangeDatePicker = (value, name) => {\n        setState((prev) => ({ ...prev, [name]: value }));\n    };\n\n    String.prototype.capitalize = function () {\n        return this.charAt(0).toUpperCase() + this.slice(1);\n    };\n\n    console.log(state)\n\n    return (\n        <MuiPickersUtilsProvider locale=\"it\" utils={MomentUtils}>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                Upload\n                <span className=\"text-primary\">Docx</span>\n            </h1>\n\n            <div style={{ paddingBottom: 12 }}>\n                <Dropzone\n                    onOperation={showFile}\n                    onDelete={() => {\n                        setUpload(false);\n                        setState({});\n                    }}\n                />\n            </div>\n\n            {upload && (\n                <div\n                    style={{\n                        display: \"flex\"\n                    }}\n                >\n                    <div\n                        style={{\n                            width: \"30%\",\n                            minHeight: \"500px\",\n                            marginTop: 7\n                        }}\n                    >\n                        <Accordion defaultExpanded>\n                            <AccordionSummary\n                                expandIcon={<ExpandMore />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                <div style={{}}>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        className={classes.button}\n                                        startIcon={<CloudDownload />}\n                                        onClick={() => generateDocument(true)}\n                                    />\n                                </div>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <div style={{ flex: 1 }}>\n                                    {Object.entries(state).map((el, key) => {\n                                        let [label, type] = el[0]?.split(\"::\");\n                                        if (type !== undefined) type = type?.split(\"||\")[0];\n                                        else label = label?.split(\"||\")[0];\n                                        label = label.replaceAll(\"_\", \" \").capitalize();\n                                        if (type === \"date\")\n                                            return (\n                                                <div key={key} style={{ paddingBottom: 15 }}>\n                                                    <KeyboardDatePicker\n                                                        fullWidth\n                                                        id={`field_${key}`}\n                                                        size=\"small\"\n                                                        label={label}\n                                                        inputVariant=\"outlined\"\n                                                        placeholder=\"dd/mm/yyyy\"\n                                                        value={el[1]}\n                                                        onChange={(value) =>\n                                                            onChangeDatePicker(value, el[0])\n                                                        }\n                                                        format=\"DD/MM/YYYY\"\n                                                    />\n                                                </div>\n                                            );\n                                        else if (type === \"time\")\n                                            return (\n                                                <div key={key} style={{ paddingBottom: 15 }}>\n                                                    <TimePicker\n                                                        fullWidth\n                                                        id={`field_${key}`}\n                                                        size=\"small\"\n                                                        label={label}\n                                                        inputVariant=\"outlined\"\n                                                        placeholder=\"hh:mm\"\n                                                        ampm={false}\n                                                        value={el[1]}\n                                                        onChange={(value) =>\n                                                            onChangeDatePicker(value, el[0])\n                                                        }\n                                                    />\n                                                </div>\n                                            );\n                                        else\n                                            return (\n                                                <div key={key} style={{ paddingBottom: 15 }}>\n                                                    <TextField\n                                                        fullWidth\n                                                        id={`field_${key}`}\n                                                        label={label}\n                                                        variant=\"outlined\"\n                                                        size=\"small\"\n                                                        value={el[1]}\n                                                        onChange={(value) => onChange(value, el[0])}\n                                                        multiline={type === \"multiline\"}\n                                                        rows={4}\n                                                    />\n                                                </div>\n                                            );\n                                    })}\n                                </div>\n                            </AccordionDetails>\n                        </Accordion>\n                    </div>\n                    <div\n                        style={{\n                            width: \"70%\",\n                            height: \"100vh\",\n                            float: \"right\",\n                            marginTop: 7,\n                            marginLeft: 5\n                        }}\n                    >\n                        <Accordion defaultExpanded>\n                            <AccordionSummary\n                                expandIcon={<ExpandMore />}\n                                aria-controls=\"panel1a-content\"\n                                id=\"panel1a-header\"\n                            >\n                                Reader\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <div style={{ flex: 1 }}>\n                                    <div\n                                        className=\"webviewer\"\n                                        ref={viewer}\n                                        style={{\n                                            flex: 1,\n                                            height: \"100vh\",\n                                        }}\n                                    />\n                                </div>\n                            </AccordionDetails>\n                        </Accordion>\n                    </div>\n\n                </div>\n            )}\n        </MuiPickersUtilsProvider>\n    );\n}\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nexport default function Error({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        }\n    }));\n    const classes = useStyles();\n    return (\n        <div className=\"text-center\">\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>404</h1>\n            <Typography paragraph variant=\"h5\" color=\"textSecondary\">\n                We are sorry but we could not find the page you are looking.\n            </Typography>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n    makeStyles,\n    TextField,\n    CircularProgress,\n    Button\n} from \"@material-ui/core\";\nimport {\n    MuiPickersUtilsProvider\n} from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport \"moment/locale/it\";\n\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\n\nexport default function Copy({ darkState }) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        },\n        button: {\n            margin: theme.spacing(1)\n        }\n    }));\n    const classes = useStyles();\n    const ref = useRef(null);\n\n    const [value, setValue] = React.useState(\"\");\n    const [progress, setProgress] = React.useState(false);\n    const [name, setName] = React.useState(\"myFile\");\n\n    return (\n        <MuiPickersUtilsProvider locale=\"it\" utils={MomentUtils}>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                Copy\n                <span className=\"text-primary\">Srt</span>\n            </h1>\n\n            <div id={\"space\"}>\n                <TextField id=\"name\" label=\"Name\" variant=\"outlined\" defaultValue={name} size={\"small\"} onChange={({target: { value }}) => setName(value)} />\n                <Button variant=\"contained\" color=\"primary\"\n            onClick={async (e) => {\n                setProgress(true)\n                const text = await navigator.clipboard.readText();\n                if(text.length > 0) {\n                    let c = text.split('\\n').map((el) => {\n                        if (el.includes(\"->\"))\n                            el = el.replace(/\\b(\\d\\d:\\d\\d:\\d\\d)\\.(\\d\\d\\d)\\b/g, \"$1,$2\")\n                        return el\n                    })\n                    setValue(c.join('\\n'))\n                    setProgress(false)\n                    navigator.clipboard.writeText(\"\")\n                }\n            }}\n            >Paste</Button>\n\n            <Button variant=\"contained\" color=\"primary\"\n             onClick={(e) => {\n                 const element = document.createElement(\"a\");\n                 const file = new Blob([value], {type: 'text/plain'});\n                 element.href = URL.createObjectURL(file);\n                 element.download = name+\".srt\";\n                 document.body.appendChild(element); // Required for this to work in FireFox\n                 element.click();\n             }}\n            >Download</Button>\n            </div>\n            <br/><br/>\n\n            {progress && <CircularProgress />}\n\n            {value.split('\\n').map((el, key) => {\n                if(parseInt(el) && !el.includes(\"->\"))\n                    return <div key={key} style={{color:\"#155e14\"}}>{el}</div>\n                else  if(el.includes(\"->\"))\n                    return <div key={key} style={{color:\"#e26823\"}}>{el}</div>\n                else return <div key={key} style={{color:\"#1292d5\"}}>{el}</div>\n            })}\n\n        </MuiPickersUtilsProvider>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\nimport {\n    AppBar,\n    CssBaseline,\n    Drawer,\n    Hidden,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Chip\n} from \"@material-ui/core\";\nimport {\n    GTranslate,\n    Menu,\n} from \"@material-ui/icons\";\nimport {\n    makeStyles,\n    useTheme,\n    createMuiTheme,\n    ThemeProvider\n} from \"@material-ui/core/styles\";\nimport { blue, grey } from \"@material-ui/core/colors\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { Copy, Error } from \"./page\";\nimport \"./styles/main.css\";\nimport \"./App.css\";\n\nconst drawerWidth = 240;\n\nfunction App(props) {\n    const { wind } = props;\n    const container = wind !== undefined ? () => wind().document.body : undefined;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const localDark = localStorage.getItem(\"dark\");\n    const isDark = localDark === null ? prefersDark : localDark === \"true\";\n\n    let location = useLocation();\n    let pathname = location.pathname.replace(\"/\", \"\");\n    if (pathname === \"\") pathname = \"docx\";\n\n    const [state, setState] = React.useState({\n        mobileOpen: false,\n        darkState: isDark\n    });\n    const { mobileOpen, darkState } = state;\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            display: \"flex\"\n        },\n        drawer: {\n            [theme.breakpoints.up(\"lg\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        appBar: {\n            [theme.breakpoints.up(\"lg\")]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth\n            }\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up(\"lg\")]: {\n                display: \"none\"\n            },\n            backgroundColor: darkState ? grey[900] : blue[500]\n        },\n        // necessary for content to be below app bar\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n            color: \"#ffffff\",\n            backgroundColor: darkState ? grey[900] : blue[500]\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3)\n        }\n    }));\n\n    const palletType = darkState ? \"dark\" : \"light\";\n    const mainPrimaryColor = darkState ? grey[900] : blue[500];\n    const mainSecondaryColor = darkState ? grey[800] : blue[300];\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: palletType,\n            primary: {\n                main: mainPrimaryColor\n            },\n            secondary: {\n                main: mainSecondaryColor\n            }\n        }\n    });\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const handleDrawerToggle = () =>\n        setState((prev) => ({ ...prev, mobileOpen: !mobileOpen }));\n    const changePage = (page) => setState((prev) => ({ ...prev, page }));\n    const handleThemeChange = React.useCallback(() => {\n        localStorage.setItem(\"dark\", !darkState);\n        setState((prev) => ({ ...prev, darkState: !prev.darkState }));\n    }, []);\n\n    const menu = [\n        { title: \"Copy Srt\", path: \"docx\", icon: <GTranslate />}\n    ];\n\n    const routeObj = [\n        { path: \"/\", obj: <Copy darkState={darkState} /> },\n        { path: \"copy\", obj: <Copy darkState={darkState} /> },\n    ];\n\n    const drawer = (\n        <div className=\"mt-32\">\n            <div className={classes.toolbar} />\n            <List>\n                {menu.map(({ title, path, icon, badge }, index) => (\n                    <Link to={`/${path}`} key={title}>\n                        <ListItem button key={title} onClick={() => changePage(path)}>\n                            <ListItemIcon\n                                style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                            >\n                                {icon}\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={<span className=\"font-bold\">{title}</span>}\n                                style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                            />\n                            {badge && (\n                                <Chip\n                                    label={badge}\n                                    size=\"small\"\n                                    color=\"secondary\"\n                                    className=\"font-bold\"\n                                    style={{ color: \"#ffffff\" }}\n                                />\n                            )}\n                        </ListItem>\n                    </Link>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar\n                    position=\"fixed\"\n                    className={classes.appBar}\n                    style={{\n                        backgroundColor: darkState ? \"#303030\" : grey[50],\n                        boxShadow: \"none\"\n                    }}\n                >\n                    <Toolbar className={\"shadow-none\"}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={handleDrawerToggle}\n                            className={classes.menuButton}\n                        >\n                            <Menu />\n                        </IconButton>\n                        <div className=\"ml-auto text-right flex\">\n                            <DarkModeToggle\n                                onChange={handleThemeChange}\n                                checked={darkState}\n                                size={60}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n\n                <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Hidden mdUp implementation=\"css\">\n                        <Drawer\n                            container={container}\n                            variant=\"temporary\"\n                            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            ModalProps={{\n                                keepMounted: true // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden mdDown implementation=\"css\">\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <Switch>\n                        {routeObj.map(({ path, obj }, key) => (\n                            <Route exact path={`/${path}`} component={() => obj} key={key} />\n                        ))}\n                        <Route path={`/lib`} component={() => <div>ciao</div>} />\n                        <Route component={() => <Error darkState={darkState} />} />\n                    </Switch>\n                </main>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nApp.propTypes = {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    wind: PropTypes.func\n};\n\nexport default App;\n/*\n\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    HashRouter,\n    BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}