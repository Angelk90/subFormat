{"version":3,"sources":["function.js","page/Error.js","page/Copy.js","App.js","serviceWorker.js","index.js"],"names":["className","args","join","Error","darkState","classes","makeStyles","title","color","textShadow","useStyles","Typography","paragraph","variant","options","originalFileName","updatedFileName","outputFormat","past","current","InspectModule","Copy","theme","button","margin","spacing","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","React","useState","setOriginal","value","setValue","progress","setProgress","name","setName","num","setNum","id","TextField","label","size","onChange","target","Button","onClick","_num","String","parseInt","padStart","e","a","navigator","clipboard","readText","undefined","length","c","split","map","el","includes","replace","writeText","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","style","display","justifyContent","alignItems","CircularProgress","App","props","wind","container","prefersDark","window","matchMedia","matches","localDark","localStorage","getItem","isDark","pathname","useLocation","mobileOpen","state","setState","root","drawer","breakpoints","up","width","appBar","marginLeft","menuButton","marginRight","grey","blue","toolbar","mixins","drawerPaper","backgroundColor","content","flexGrow","padding","palletType","mainPrimaryColor","mainSecondaryColor","darkTheme","createMuiTheme","primary","main","useTheme","handleDrawerToggle","prev","handleThemeChange","useCallback","setItem","menu","path","icon","GTranslate","routeObj","obj","List","index","badge","to","key","ListItem","page","ListItemIcon","ListItemText","Chip","ThemeProvider","CssBaseline","AppBar","position","boxShadow","Toolbar","IconButton","aria-label","edge","Menu","checked","Hidden","mdUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","mdDown","exact","component","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e22caef.chunk.js","sourcesContent":["const className = (...args) => args.join(' ');\nexport { className };\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { className } from \"../function\";\nimport \"../styles/main.css\";\nimport {ReactGhLikeDiff} from \"react-gh-like-diff\";\nimport \"react-gh-like-diff/dist/css/diff2html.min.css\";\nimport \"../styles/styles.css\";\n\nexport default function Error({ darkState }) {\n    const useStyles = makeStyles(() => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${\n                darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        }\n    }));\n    const classes = useStyles();\n    return (\n        <div className=\"text-center\">\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>404</h1>\n            <Typography paragraph variant=\"h5\" color=\"textSecondary\">\n                We are sorry but we could not find the page you are looking.\n            </Typography>\n            <ReactGhLikeDiff\n                options={{\n                    originalFileName: \"fileName\",\n                    updatedFileName: \"s\",\n                    outputFormat:  'side-by-side'\n                }}\n                past={\"ciao\\nciao\"}\n                current={\"ss\"}\n            />\n        </div>\n    );\n}\n","import React from \"react\";\nimport {\n    makeStyles,\n    TextField,\n    CircularProgress,\n    Button,\n    Chip,\n    AccordionSummary,\n    Accordion,\n    Typography,\n    AccordionDetails\n} from \"@material-ui/core\";\nimport {useDropzone} from \"react-dropzone\";\n\nimport PizZip from \"pizzip\";\nimport Docxtemplater from \"docxtemplater\";\nimport InspectModule from \"docxtemplater/js/inspect-module\";\n\nimport {className} from \"../function\";\nimport {AttachFile, ExpandMore} from \"@material-ui/icons\";\n\nimport \"moment/locale/it\";\nimport \"../styles/main.css\";\n\nconst iModule = InspectModule();\n\nfunction Dropzone({\n                      multiple = false, onOperation, onDelete = () => {\n    }\n                  }) {\n    const [myFile, setMyFile] = React.useState([]);\n\n    const onDrop = React.useCallback(\n        (acceptedFiles) => {\n            setMyFile([...acceptedFiles]);\n            onOperation(acceptedFiles);\n        },\n        [myFile, onOperation]\n    );\n\n    const {getRootProps, getInputProps} = useDropzone({\n        accept:\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        onDrop\n    });\n\n    const removeAll = () => setMyFile([]);\n    const file = myFile.map((file, key) => (\n        <Chip\n            key={key}\n            icon={<AttachFile/>}\n            label={`${file.path} - ${file.size} bytes`}\n            color=\"primary\"\n            onDelete={() => {\n                removeAll();\n                onDelete();\n            }}\n            style={{cursor: \"pointer\"}}\n        />\n    ));\n\n    return (\n        <>\n      <span {...getRootProps({className: \"drop-zon\"})}>\n        {<input {...getInputProps()} multiple={multiple}/>}\n          {file.length > 0 ? (\n              file\n          ) : (\n              <Chip\n                  icon={<AttachFile/>}\n                  label={\"File\"}\n                  color=\"primary\"\n                  style={{\n                      cursor: \"pointer\"\n                  }}\n              />\n          )}\n      </span>\n        </>\n    );\n}\n\nexport default function Copy({darkState}) {\n    const useStyles = makeStyles((theme) => ({\n        title: {\n            color: darkState ? \"#ffffff\" : \"#343a40\",\n            textShadow: `3px 3px 2px ${darkState ? \"rgba(0, 0, 0, 1)\" : \"rgba(150, 150, 150, 1)\"\n            }`\n        },\n        button: {\n            margin: theme.spacing(1)\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            flexBasis: \"33.33%\",\n            flexShrink: 0\n        },\n        secondaryHeading: {\n            fontSize: theme.typography.pxToRem(15),\n            color: theme.palette.text.secondary\n        }\n    }));\n    const classes = useStyles();\n\n    const [original, setOriginal] = React.useState(\"\");\n    const [value, setValue] = React.useState(\"\");\n    const [progress, setProgress] = React.useState(false);\n    const [name, setName] = React.useState(\"myFile\");\n    const [num, setNum] = React.useState(\"01\");\n\n    const showFile = async (files) => {\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            setProgress(true);\n            const text = e.target.result;\n            var doc = new Docxtemplater(new PizZip(text), {\n                modules: [iModule],\n                linebreaks: true\n            });\n            const t = doc.getFullText();\n            if (t.length > 0) {\n                let c = t.split(\"\\n\").map((el) => {\n                    if (el.includes(\"->\"))\n                        el = el.replace(/\\b(\\d\\d:\\d\\d:\\d\\d)\\.(\\d\\d\\d)\\b/g, \"$1,$2\");\n                    return el;\n                });\n                setValue(c.join(\"\\n\"));\n                setProgress(false);\n            }\n        };\n        reader.readAsBinaryString(files[0]);\n    };\n\n    return (\n        <>\n            <h1 className={className(classes.title, \"text-6xl font-bold hp\")}>\n                Copy\n                <span className=\"text-primary\">Srt</span>\n            </h1>\n\n            <div id={\"space\"}>\n                {false && (\n                    <Dropzone\n                        onOperation={showFile}\n                        onDelete={() => {\n                            setValue(\"\");\n                        }}\n                    />\n                )}\n                <TextField\n                    id=\"name\"\n                    label=\"Name file\"\n                    variant=\"outlined\"\n                    value={name}\n                    size={\"small\"}\n                    onChange={({target: {value}}) => setName(value)}\n                />\n                <TextField\n                    id=\"num\"\n                    label=\"Num file\"\n                    variant=\"outlined\"\n                    value={num}\n                    size={\"small\"}\n                    onChange={({target: {value}}) => setNum(value)}\n                />\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        let _num = String(parseInt(num) + 1).padStart(2, \"0\");\n                        setNum(_num);\n                    }}\n                >\n                    Inc\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={async (e) => {\n                        setProgress(true);\n                        const text = await navigator.clipboard?.readText();\n                        if (text !== undefined && text.length > 0) {\n                            setOriginal(text)\n                            let c = text.split(\"\\n\").map((el) => {\n                                if (el.includes(\"->\"))\n                                    el = el.replace(/\\b(\\d\\d:\\d\\d:\\d\\d)\\.(\\d\\d\\d)\\b/g, \"$1,$2\");\n                                return el;\n                            });\n                            setValue(c.join(\"\\n\"));\n                            setProgress(false);\n                            navigator.clipboard.writeText(\"\");\n                        } else {\n                            setProgress(false);\n                        }\n                    }}\n                >\n                    Paste\n                </Button>\n\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => {\n                        const element = document.createElement(\"a\");\n                        const file = new Blob([value], {type: \"text/plain\"});\n                        element.href = URL.createObjectURL(file);\n                        element.download = name + num + \".srt\";\n                        document.body.appendChild(element); // Required for this to work in FireFox\n                        element.click();\n                    }}\n                >\n                    Download\n                </Button>\n            </div>\n            <br/>\n\n            {progress && (\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\"\n                    }}\n                >\n                    <CircularProgress/>\n                </div>\n            )}\n\n            {false && value.length > 0 &&\n                value.split(\"\\n\\n\").map((el, key) => {\n                    let row = el.split(\"\\n\");\n                    const num = row.shift();\n                    const time = row.shift();\n                    return (\n                        <Accordion key={key}>\n                            <AccordionSummary\n                                expandIcon={<ExpandMore/>}\n                                aria-controls=\"panel1bh-content\"\n                                id=\"panel1bh-header\"\n                            >\n                                <Typography className={classes.heading}>\n                                    <span style={{color: \"#155e14\"}}>{num}</span>{\" \"}\n                                    <span style={{color: \"#e26823\"}}>({time})</span>\n                                </Typography>\n                                <Typography className={classes.secondaryHeading}>\n                                    {row.join(\"\\n\")}\n                                </Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography style={{color: \"#1292d5\"}}>\n                                    {row.join(\"\\n\")}\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                    );\n                })}\n        </>\n    );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\nimport {\n    AppBar,\n    CssBaseline,\n    Drawer,\n    Hidden,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Chip\n} from \"@material-ui/core\";\nimport {\n    GTranslate,\n    Menu,\n} from \"@material-ui/icons\";\nimport {\n    makeStyles,\n    useTheme,\n    createMuiTheme,\n    ThemeProvider\n} from \"@material-ui/core/styles\";\nimport { blue, grey } from \"@material-ui/core/colors\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { Copy, Error } from \"./page\";\nimport \"./styles/main.css\";\nimport \"./App.css\";\n\nconst drawerWidth = 240;\n\nfunction App(props) {\n    const { wind } = props;\n    const container = wind !== undefined ? () => wind().document.body : undefined;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const localDark = localStorage.getItem(\"dark\");\n    const isDark = localDark === null ? prefersDark : localDark === \"true\";\n\n    let location = useLocation();\n    let pathname = location.pathname.replace(\"/\", \"\");\n    if (pathname === \"\") pathname = \"docx\";\n\n    const [state, setState] = React.useState({\n        mobileOpen: false,\n        darkState: isDark\n    });\n    const { mobileOpen, darkState } = state;\n\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            display: \"flex\"\n        },\n        drawer: {\n            [theme.breakpoints.up(\"lg\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        appBar: {\n            [theme.breakpoints.up(\"lg\")]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth\n            }\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up(\"lg\")]: {\n                display: \"none\"\n            },\n            backgroundColor: darkState ? grey[900] : blue[500]\n        },\n        // necessary for content to be below app bar\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n            color: \"#ffffff\",\n            backgroundColor: darkState ? grey[900] : blue[500]\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3)\n        }\n    }));\n\n    const palletType = darkState ? \"dark\" : \"light\";\n    const mainPrimaryColor = darkState ? grey[900] : blue[500];\n    const mainSecondaryColor = darkState ? grey[800] : blue[300];\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: palletType,\n            primary: {\n                main: mainPrimaryColor\n            },\n            secondary: {\n                main: mainSecondaryColor\n            }\n        }\n    });\n\n    const classes = useStyles();\n    const theme = useTheme();\n    const handleDrawerToggle = () =>\n        setState((prev) => ({ ...prev, mobileOpen: !mobileOpen }));\n    const changePage = (page) => setState((prev) => ({ ...prev, page }));\n    const handleThemeChange = React.useCallback(() => {\n        localStorage.setItem(\"dark\", !darkState);\n        setState((prev) => ({ ...prev, darkState: !prev.darkState }));\n    }, []);\n\n    const menu = [\n        { title: \"Copy Srt\", path: \"docx\", icon: <GTranslate />}\n    ];\n\n    const routeObj = [\n        { path: \"/\", obj: <Copy darkState={darkState} /> },\n        { path: \"copy\", obj: <Copy darkState={darkState} /> },\n    ];\n\n    const drawer = (\n        <div className=\"mt-32\">\n            <div className={classes.toolbar} />\n            <List>\n                {menu.map(({ title, path, icon, badge }, index) => (\n                    <Link to={`/${path}`} key={title}>\n                        <ListItem button key={title} onClick={() => changePage(path)}>\n                            <ListItemIcon\n                                style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                            >\n                                {icon}\n                            </ListItemIcon>\n                            <ListItemText\n                                primary={<span className=\"font-bold\">{title}</span>}\n                                style={{ color: path === pathname ? \"#ffffff\" : \"#ffffff80\" }}\n                            />\n                            {badge && (\n                                <Chip\n                                    label={badge}\n                                    size=\"small\"\n                                    color=\"secondary\"\n                                    className=\"font-bold\"\n                                    style={{ color: \"#ffffff\" }}\n                                />\n                            )}\n                        </ListItem>\n                    </Link>\n                ))}\n            </List>\n        </div>\n    );\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar\n                    position=\"fixed\"\n                    className={classes.appBar}\n                    style={{\n                        backgroundColor: darkState ? \"#303030\" : grey[50],\n                        boxShadow: \"none\"\n                    }}\n                >\n                    <Toolbar className={\"shadow-none\"}>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"open drawer\"\n                            edge=\"start\"\n                            onClick={handleDrawerToggle}\n                            className={classes.menuButton}\n                        >\n                            <Menu />\n                        </IconButton>\n                        <div className=\"ml-auto text-right flex\">\n                            <DarkModeToggle\n                                onChange={handleThemeChange}\n                                checked={darkState}\n                                size={60}\n                            />\n                        </div>\n                    </Toolbar>\n                </AppBar>\n\n                <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                    {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                    <Hidden mdUp implementation=\"css\">\n                        <Drawer\n                            container={container}\n                            variant=\"temporary\"\n                            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                            open={mobileOpen}\n                            onClose={handleDrawerToggle}\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            ModalProps={{\n                                keepMounted: true // Better open performance on mobile.\n                            }}\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                    <Hidden mdDown implementation=\"css\">\n                        <Drawer\n                            classes={{\n                                paper: classes.drawerPaper\n                            }}\n                            variant=\"permanent\"\n                            open\n                        >\n                            {drawer}\n                        </Drawer>\n                    </Hidden>\n                </nav>\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <Switch>\n                        {routeObj.map(({ path, obj }, key) => (\n                            <Route exact path={`/${path}`} component={() => obj} key={key} />\n                        ))}\n                        <Route path={`/lib`} component={() => <div>ciao</div>} />\n                        <Route component={() => <Error darkState={darkState} />} />\n                    </Switch>\n                </main>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nApp.propTypes = {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    wind: PropTypes.func\n};\n\nexport default App;\n/*\n\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    HashRouter\n} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter basename='/'>\n        <App />\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}